
    /**
     * 测试目的: 测试 ScheduleCenter 的触发条件：IP全部超时，会触发。
     * 测试方法:
            5个错误IP，尝试触发SC，之后再发请求，如果成功即通过。
     *          1. 将当前server ip列表全部置换为错误ip
     *          2. 解析域名,查看日志: 1)分别使用ip1, ip2, ip3进行解析,均失败，
     *          3. 等待30S, 解析域名,查看日志: 1)用ip4发起一次嗅探,失败
     *          4. 等待30S, 解析域名,查看日志: 1)用ip5发起嗅探,失败,触发 ScheduleCenter  更新
     *          5. 解析域名,查看日志: 1)通过更新后的ip进行解析; 2)成功解析,disable状态解除
     */

   /**
     * 测试目的: 测试 ScheduleCenter  是否可以正常更新server ip
     * 测试方法:取内置默认的IP列表的首个IP，手动调用SC请求，再取首个IP，看能否是对应

     *          1. 解析域名A,查看日志是否是访问的默认ip
     *          2. 查看日志是否SchdulerCenter是否有更新
     *          3. 解析域名B,查看日志是否使用更新后的IP进行解析
     */
   

/*!
 *  测试目的: 测试 ScheduleCenter 的停服操作是否能够生效，
 *  测试步骤，控制 ScheduleCenter 返回的值为停服，然后使用任意API看是否始终返回nil。
 */

    /**
     * 测试目的: 测试 ScheduleCenter 24小时内，持久化功能是否正常 以及测试 ScheduleCenter 的触发条件：每24小时的间隔，触发一次。
      如果一轮遍历结束都未成功，中断5min，再进行遍历；（三个IP失败后就继续按照原来的IP池轮转。如果IP池再轮转了一遍且继续失败重新触发SC时必须距上一次SC5min以上才会真正发起新的SC）

    * 测试方法：修改24小时，为较短时间，比如5秒，手动调用SC请求，sleep 5秒，再请求，看下是否能请求。本地是否能更新。获取本地固化数据的最近更新时间。
     *          1. 运行test ScheduleCenter Update1, 完成后立即运行test ScheduleCenter Update2( ScheduleCenter   在debug模式下更新间隔为1min)
     *          2. 解析域名,查看日志: 1)并未发起SC更新; 2)通过上次更新后的ip进行访问
     */
   
    /**
     * 测试目的: SC触发失败后，测试SC的轮转机制。
     * 测试方法:
     *          1. 将server ips大小设置为3,且均为错误ip,同时将 ScheduleCenter 访问ip全部设置为错误ip。
     *          2. 解析域名,观察日志: 1) 三次尝试均失败; 2) 访问 ScheduleCenter ,且三次尝试均失败。
     *          3. 解析域名,观察日志: 1) 处于disable模式,准备启动嗅探; 2) 访问 ScheduleCenter 未完成,放弃嗅探。
     *          4. 解析域名,观察日志: 1) 发起一次嗅探,且继续按照原有ip轮转逻辑进行访问。
     */
   
   文档里还有几个需要注意的点：http://gitlab.alibaba-inc.com/alicloud-ams/httpdns-doc/blob/master/v6/架构.md 


 /*!
 * 测试目的：取消SDK端收敛机制，即持久化的activatedIpIndex不会有超时重置的逻辑；
 */
 
 /*!
 * 
 - 测试目的：403错误，也会触发SC。

> 假如用户等级从L4降级到L3，如何进行用户流量的调度
通过黑/白名单控制该用户能够获取服务的HTTPDNS IP，发生级别切换时，终端访问L4 IP，服务端返回403响应码，触发终端SC，SC返回L3 IP池，终端复原，会有短暂的切换异常状态，< 5min；

 - 测试方法，手动干预返回值。或者服务端提供测试API，始终返回403
 */


